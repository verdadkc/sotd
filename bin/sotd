#!/bin/bash

## Quickly and interactively generate shave of the day boilerplate for /r/wetshaving.
## Output is written to 'archive' directory, tagged with date, e.g. sotd.2021-05-03.
## The output targets the flavor of markdown used on reddit. Optionally can write as json.

## TOTALLY depends on the marvelous fzf utility being present.
## See https://github.com/junegunn/fzf#installation for installation details.
## You need fzf in your life. Will not work without fzf, just saying.

## Program developed and tested on macos Catalina. Should work on linux as is.
## Unlikely to work on Windows without changes. Maybe on Windows Linux Subsytem,
## but author does not have a Windows machine. You up for porting it?

##-- Define utility functions.
function push {  # append line to the sotd file
    printf "%s\n" "$1" >> "${sotd}"
}

function select_from {
   if [[ -f "$1.mine" ]]; then
      item="$(cat "$1" "$1.mine" | fzf )"  # this line is where the magic happens
   else
      item="$(fzf < "$1")"  # this line is where the magic happens
   fi
   markdown="- **$2:**"
   # user choice of 'none' results in nothing being returned
   if [[ "${item}" != "none" ]]; then
      echo "${markdown} ${item}"
   fi
}

# Represent the user choices as json, a little something for the data affionados.
function json(){
  printf "%s\n" "{\
\"razor\":\"${razor}\",\
\"blade\":\"${blade}\",\
\"razor2\":\"${razor2}\",\
\"blade2\":\"${blade2}\",\
\"lather\":\"${lather}\",\
\"brush\":\"${brush}\",\
\"post\":\"${post}\",\
\"terrorade\":\"${terrorade}\",\
\"frag\":\"${frag}\",\
\"date\":\"${when}\"}"
}

# The author likes Terrorade, but caters to less enlightened tastes
use_terrorade="yes"     # set it to yes to include terrorade

##-- The utility functions are all defined, let's use them.

# Grab the current date
when="$(date +%Y-%m-%d)"

# Create the name of the sotd file.
sotd="archive/sotd.${when}"

# Create the empty sotd file.
touch "${sotd}"  # In case we need a new file for a new day.
echo "" > "${sotd}" # If one already exists, wipe it. Allows for easy retry when desired.

# Grab user choices
razor=$(select_from  "./razors"   "Razor")
blade=$(select_from  "./blades"   "Blade")
razor2=$(select_from  "./razors"  "Razor")
blade2=$(select_from  "./blades"  "Blade")
lather=$(select_from "./lathers"  "Lather")
brush=$(select_from  "./brushes"  "Brush")
post=$(select_from   "./posts"    "Post Shave")
frag=$(select_from   "./frags"    "Fragrance")
if [[ ${use_terrorade} == "yes" ]]; then
   terrorade=$(select_from   "./terrorade"   "Terrorade")
else
   terrorade=""
fi

# Write user choices to the sotd file.
for item in "${razor}" "${blade}" "${razor2}"  "${blade2}" "${lather}" "${brush}" "${post}" "${terrorade}" "${frag}"
do
   if [[ "${item}" != "" ]]; then
      push "${item}"
   fi
done
push ' '
push '---'

# To also archive the data as json, uncomment line below.
json > "${sotd}.json"

# Copy the sotd to the clipboard for enhanced pasting convenience.
# This only works on MacOS. Uncomment if so desired.
pbcopy < "${sotd}"

# We wrote the sotd to the archive dir, now show it in the console.
cat "${sotd}"
